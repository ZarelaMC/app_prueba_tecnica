name: Análisis CI con SonarCloud y Despliegue automático a ECS Fargate 🚀 

on:
  push:
    branches: [main, master]
  pull_request:
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: 18
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  sonarqube:
    name: 📊 Análisis SonarCloud
    runs-on: ubuntu-latest
    steps:
      - name: 🛠 Instalar jq
        run: sudo apt-get install jq -y

      - name: 🔐 Descargar secretos desde AWS Secrets Manager y protegerlos para que no se impriman
        id: fetch-secrets
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          SECRET_JSON=$(aws secretsmanager get-secret-value --secret-id ci-cd-secrets --query SecretString --output text --region $AWS_REGION)
          echo "$SECRET_JSON" | jq -r 'to_entries | .[] | "echo ::add-mask::\(.value)\necho \(\.key)=\(.value) >> $GITHUB_ENV"' | bash

      - name: 📥 Checkout del repositorio
        uses: actions/checkout@v3

      - name: 🔧 Configuración Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Instalación de dependencias
        run: npm ci

      - name: 🧪 Tests con cobertura (Jest)
        run: npx jest --coverage

      - name: 🔍 Análisis estático con SonarCloud
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          SONAR_PROJECT_KEY: ${{ env.SONAR_PROJECT_KEY }}
          SONAR_ORGANIZATION: ${{ env.SONAR_ORGANIZATION }}

      - name: 🛑 Validación de Quality Gate SonarCloud
        id: sonarcloud-check
        run: |
          echo "✅ Verificando resultado en Quality Gate..."
          RESPONSE=$(curl -s -u "${SONAR_TOKEN}:" "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${SONAR_PROJECT_KEY}")
          STATUS=$(echo "${RESPONSE}" | jq -r '.projectStatus.status')

          echo "Quality Gate Status: $STATUS"

          if [ "$STATUS" != "OK" ]; then
            echo "❌ El análisis de SonarCloud ha fallado."
            echo "Detalles:"
            echo "${RESPONSE}" | jq '.projectStatus.conditions'
            exit 1
          fi

  deploy:
    name: 🚀 Despliegue ECS Fargate
    runs-on: ubuntu-latest
    needs: sonarqube
    steps:
      - name: 🛠 Instalar jq
        run: sudo apt-get install jq -y

      - name: 🔐 Descargar secretos desde AWS Secrets Manager y protegerlos para que no se impriman
        id: fetch-secrets
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          SECRET_JSON=$(aws secretsmanager get-secret-value --secret-id ci-cd-secrets --query SecretString --output text --region $AWS_REGION)
          echo "$SECRET_JSON" | jq -r 'to_entries | .[] | "echo ::add-mask::\(.value)\necho \(\.key)=\(.value) >> $GITHUB_ENV"' | bash

      - name: 📥 Checkout del repositorio
        uses: actions/checkout@v3

      - name: 🔧 Configuración Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Instalación de dependencias
        run: npm ci

      - name: 📁 Preparar archivos del sitio
        run: |
          mkdir -p build
          for dir in css js img paginas; do
            if [ -d "$dir" ]; then
              echo "✅ Copiando $dir a build/"
              cp -r $dir build/
            else
              echo "⚠️ $dir no encontrado"
            fi
          done
          [ -f paginas/pagina.html ] && cp paginas/pagina.html build/

      - name: 🔐 Configurar credenciales de AWS 
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔐 Login en Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION 
          | docker login --username AWS --password-stdin $ECR_REPOSITORY

      - name: 📂 Verificar archivos en el directorio raíz antes del build
        run: |
          echo "Contenido del directorio actual:"
          ls -la

      - name: 🐳 Construir, Etiquetar & Push imágen Docker - Construye una nueva imágen
        run: |
          IMAGE_TAG=app-$(date +%Y%m%d)
          docker build -f docker/Dockerfile -t $ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REPOSITORY:latest .
          docker push $ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REPOSITORY:latest
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: 📄 Actualizar Task Definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs/ecs-task-reto2.json
          container-name: reto2-container
          image: ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: 📦 Desplegar a ECS Fargate
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          service: ${{ env.SERVICE_NAME }}
          cluster: ${{ env.CLUSTER_NAME }}
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          wait-for-service-stability: true

      - name: 📈 Esperar servicio ECS estable
        run: |
          aws ecs wait services-stable \
          --cluster $CLUSTER_NAME \
          --services $SERVICE_NAME \
          --region $AWS_REGION

      - name: 📈 Monitorear estado del despliegue - Esperar la estabilidad de ECS
        run: |
          echo "Esperando que el servicio ECS esté estable..."
          aws ecs wait services-stable \
          --cluster ${{ env.CLUSTER_NAME }} \
          --services ${{ env.SERVICE_NAME }} \
          --region ${{ env.AWS_REGION }}
          echo "✅ Despliegue exitoso en Fargate"
