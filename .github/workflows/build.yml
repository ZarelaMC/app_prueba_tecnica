name: An√°lisis CI con SonarCloud y Despliegue autom√°tico a ECS Fargate üöÄ 

on:
  push:
    branches: [main, master]
  pull_request:
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: 18
  SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPO: ${{ secrets.ECR_REPOSITORY }}
  CLUSTER_NAME: ${{ secrets.CLUSTER_NAME }}
  SERVICE_NAME: ${{ secrets.SERVICE_NAME }}

jobs:
  sonarqube:
    name: üìä An√°lisis SonarCloud
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout del repositorio
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: üîß Configuraci√≥n Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üì¶ Instalaci√≥n de dependencias
        run: npm ci

      - name: üß™ Tests con cobertura (Jest)
        run: npx jest --coverage

      - name: üîç An√°lisis est√°tico con SonarCloud
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}

      - name: üõë Validaci√≥n de Quality Gate SonarCloud
        id: sonarcloud-check
        run: |
          echo "‚úÖ Verificando resultado en Quality Gate..."
          RESPONSE=$(curl -s -u "${SONAR_TOKEN}:" "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${SONAR_PROJECT_KEY}")
          STATUS=$(echo "${RESPONSE}" | jq -r '.projectStatus.status')

          echo "Quality Gate Status: $STATUS"

          if [ "$STATUS" != "OK" ]; then
            echo "‚ùå El an√°lisis de SonarCloud ha fallado."
            echo "Detalles:"
            echo "${RESPONSE}" | jq '.projectStatus.conditions'
            exit 1
          fi

  deploy:
    name: üöÄ Despliegue ECS Fargate
    runs-on: ubuntu-latest
    needs: sonarqube
    steps:
      - name: üì• Checkout
        uses: actions/checkout@v3

      - name: üîß Configuraci√≥n Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: üì¶ Instalaci√≥n de dependencias
        run: npm ci

      - name: üìÅ Preparar archivos del sitio
        run: |
          mkdir -p build
          for dir in css js img paginas; do
            if [ -d "$dir" ]; then
              echo "‚úÖ Copiando $dir a build/"
              cp -r $dir build/
            else
              echo "‚ö†Ô∏è $dir no encontrado"
            fi
          done

          if [ -f paginas/pagina.html ]; then
            cp paginas/pagina.html build/
            echo "‚úÖ pagina.html copiado"
          else
            echo "‚ö†Ô∏è pagina.html no encontrado"
          fi

      - name: üîê Configurar credenciales de AWS 
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üîê Login en Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} \
            | docker login --username AWS --password-stdin $ECR_REPO

      - name: üê≥ Build & Push Docker Image
        run: |
          IMAGE_TAG=app-$(date +%Y%m%d%H%M%S)
          echo "üõ†Ô∏è Construyendo imagen Docker: $IMAGE_TAG"
          docker build -f docker/Dockerfile -t ${{ env.ECR_REPO }}:$IMAGE_TAG -t ${{ env.ECR_REPO }}:latest .
          docker push ${{ env.ECR_REPO }}:$IMAGE_TAG
          docker push ${{ env.ECR_REPO }}:latest
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: üìù Renderizar Task Definition
        id: render-task
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs/ecs-task-reto2.json
          container-name: reto2-container
          image: ${{ secrets.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: üöÄ Desplegar en ECS Fargate
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          service: ${{ secrets.SERVICE_NAME }}
          cluster: ${{ secrets.CLUSTER_NAME }}
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          wait-for-service-stability: true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: üìä Validar estado del servicio ECS
        run: |
          echo "üì° Esperando estabilidad del servicio..."
          aws ecs wait services-stable \
            --cluster $CLUSTER_NAME \
            --services $SERVICE_NAME \
            --region $AWS_REGION
          echo "‚úÖ Despliegue exitoso"
