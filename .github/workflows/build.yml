name: Análisis CI con SonarCloude
on:
  push:
    branches:
      - master
      - main
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  sonarqube:
    name: SonarQube
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Descargar el código del repositorio
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  
      - name: 🔧 Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18  
      - name: 📦 Instalar dependencias
        run: npm ci
        
      - name: 🧪 Ejecutar pruebas con Jest - generación de coverage
        run: npx jest --coverage  

      - name: 🔍 Escanear código con SonarCloud
        uses: SonarSource/sonarqube-scan-action@v4
        env: 
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          
      - name: 🛑 Verificar resultado de SonarCloud
        id: sonarcloud-check
        run: |
          # Obtener el estado de calidad del análisis de SonarCloud
          SONAR_PROJECT_KEY=${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_TOKEN=${{ secrets.SONAR_TOKEN }}
          SONAR_URL="https://sonarcloud.io/api/qualitygates/project_status?projectKey=${SONAR_PROJECT_KEY}"

          # Hacer una solicitud a la API de SonarCloud para obtener el estado
          RESPONSE=$(curl -s -u "${SONAR_TOKEN}:" "${SONAR_URL}")
          STATUS=$(echo "${RESPONSE}" | jq -r '.projectStatus.status')

          # Verificar el estado y mostrar el mensaje correspondiente
          if [ "${STATUS}" == "OK" ]; then
            echo "✅ El análisis de SonarCloud ha pasado correctamente."
          else
            echo "❌ El análisis de SonarCloud ha fallado."
            echo "Detalles del fallo:"
            echo "${RESPONSE}" | jq '.projectStatus.conditions'
            exit 1  # Falla el job si el análisis no pasa
          fi

  deploy:
    name: ECS Deploy
    runs-on: ubuntu-latest
    needs: sonarqube
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v3

      - name: 🔧 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: 📦 Instalar dependencias
        run: npm ci

      - name: 🏗️ Copiar archivos del sitio web
        run: |
          mkdir -p build
          [ -d APP_PRUEBA_TECNICA/css ] && cp -r APP_PRUEBA_TECNICA/css build/
          [ -d APP_PRUEBA_TECNICA/js ] && cp -r APP_PRUEBA_TECNICA/js build/
          [ -d APP_PRUEBA_TECNICA/img ] && cp -r APP_PRUEBA_TECNICA/img build/
          [ -d APP_PRUEBA_TECNICA/paginas ] && cp -r APP_PRUEBA_TECNICA/paginas build/
          [ -f APP_PRUEBA_TECNICA/pagina.html ] && cp APP_PRUEBA_TECNICA/pagina.html build/

      - name: 🔐 Login en ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
            | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: 🐳 Construir, Etiquetar & Push imágen Docker
        run: |
          IMAGE_TAG=app-$(date +%s)
          docker build -t ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG -t ${{ secrets.ECR_REPOSITORY }}:latest .
          docker push ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
          docker push ${{ secrets.ECR_REPOSITORY }}:latest
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: 📄 Actualizar Task Definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ecs-task-definition.json
          container-name: app-container
          image: ${{ secrets.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: 📦 Desplegar a ECS Fargate
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          service: ${{ secrets.SERVICE_NAME }}
          cluster: ${{ secrets.CLUSTER_NAME }}
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          wait-for-service-stability: true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: 📈 Monitorear estado del despliegue - Esperar la estabilidad de ECS
        run: |
          echo "Esperando que el servicio ECS esté estable..."
          aws ecs wait services-stable \
          --cluster ${{ secrets.CLUSTER_NAME }} \
          --services ${{ secrets.SERVICE_NAME }} \
          --region ${{ secrets.AWS_REGION }}
          echo "✅ Despliegue exitoso en Fargate"